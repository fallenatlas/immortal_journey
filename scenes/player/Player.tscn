[gd_scene load_steps=66 format=3 uid="uid://ccxfk82g8wye1"]

[ext_resource type="Script" path="res://scripts/player/Player.gd" id="1_ooqp6"]
[ext_resource type="Shader" path="res://Shaders/Player.gdshader" id="2_76q85"]
[ext_resource type="PackedScene" uid="uid://d1yvvb8bqtgm3" path="res://scenes/player/dash.tscn" id="2_s882g"]
[ext_resource type="Texture2D" uid="uid://ckq6mdhwsxec3" path="res://Martial Hero/Sprites/Death.png" id="3_b3m7o"]
[ext_resource type="Texture2D" uid="uid://b3lxd8fx2gm1b" path="res://Martial Hero/Sprites/Idle.png" id="4_jo2p5"]
[ext_resource type="Texture2D" uid="uid://cp7vio3tng5qn" path="res://Martial Hero/PNG/Idle/1.png" id="5_en8x0"]
[ext_resource type="Texture2D" uid="uid://25qt718uyxef" path="res://Martial Hero/Sprites/Jump.png" id="5_gwcrf"]
[ext_resource type="Script" path="res://scripts/player/DashEffect.gd" id="5_jlfvf"]
[ext_resource type="Texture2D" uid="uid://dug3pyivejt0g" path="res://Martial Hero/Sprites/Run.png" id="6_1d8tg"]
[ext_resource type="Texture2D" uid="uid://ctvxw771bj7vs" path="res://Martial Hero/Sprites/Fall.png" id="7_nu55d"]
[ext_resource type="Texture2D" uid="uid://b8ybxgkm81k4c" path="res://Martial Hero/Sprites/Take Hit - white silhouette.png" id="8_vhexq"]
[ext_resource type="Script" path="res://scripts/Camera/CameraShake.gd" id="10_ruuap"]
[ext_resource type="Script" path="res://scenes/player/health_manager.gd" id="12_2wcsw"]
[ext_resource type="Script" path="res://scenes/player/courage_manager.gd" id="13_4olqt"]
[ext_resource type="Texture2D" uid="uid://b6dqrfrr5rmt8" path="res://assets/martial_hero/Attack1.png" id="13_cxbse"]
[ext_resource type="Texture2D" uid="uid://cnxliq7dwipdp" path="res://assets/martial_hero/Attack2.png" id="14_56vgv"]
[ext_resource type="AudioStream" uid="uid://daua2topsdivk" path="res://Audio/SFX/12_Player_Movement_SFX/03_Step_grass_03.wav" id="14_lnfkc"]
[ext_resource type="Texture2D" uid="uid://casiv1is0w84f" path="res://assets/martial_hero/Death.png" id="15_6vbcu"]
[ext_resource type="Script" path="res://scripts/player/AttackManager.gd" id="17_gd8pb"]
[ext_resource type="AudioStream" uid="uid://bhtdecfqlhau8" path="res://Audio/SFX/breathing-6811.mp3" id="20_mjcii"]
[ext_resource type="AudioStream" uid="uid://hajx828e8edr" path="res://Audio/SFX/heartbeat-sound-effect-111218.mp3" id="21_77wdt"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wi5bl"]
shader = ExtResource("2_76q85")
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/time = null

[sub_resource type="Shader" id="Shader_kcnjn"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable's ParticleProcessMaterial.

shader_type particles;
render_mode disable_velocity;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float inherit_emitter_velocity_ratio = 0;
uniform float initial_linear_velocity_min;
uniform float initial_linear_velocity_max;
uniform float directional_velocity_min;
uniform float directional_velocity_max;
uniform float angular_velocity_min;
uniform float angular_velocity_max;
uniform float orbit_velocity_min;
uniform float orbit_velocity_max;
uniform float radial_velocity_min;
uniform float radial_velocity_max;
uniform float linear_accel_min;
uniform float linear_accel_max;
uniform float radial_accel_min;
uniform float radial_accel_max;
uniform float tangent_accel_min;
uniform float tangent_accel_max;
uniform float damping_min;
uniform float damping_max;
uniform float initial_angle_min;
uniform float initial_angle_max;
uniform float scale_min;
uniform float scale_max;
uniform float hue_variation_min;
uniform float hue_variation_max;
uniform float anim_speed_min;
uniform float anim_speed_max;
uniform float anim_offset_min;
uniform float anim_offset_max;
uniform float lifetime_randomness;
uniform vec3 emission_shape_offset = vec3(0.);
uniform vec3 emission_shape_scale = vec3(1.);
uniform vec3 velocity_pivot = vec3(0.);
uniform vec4 color_value : source_color;
uniform vec3 gravity;
uniform sampler2D color_ramp : repeat_disable;


vec4 rotate_hue(vec4 current_color, float hue_rot_angle){
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.000, 0.000, 0.000, 1.0)) +
		mat4(vec4(0.701, -0.587, -0.114, 0.0),
			vec4(-0.299, 0.413, -0.114, 0.0),
			vec4(-0.300, -0.588, 0.886, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
		mat4(vec4(0.168, 0.330, -0.497, 0.0),
			vec4(-0.328, 0.035,  0.292, 0.0),
			vec4(1.250, -1.050, -0.203, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
	return hue_rot_mat * current_color;
}


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

struct DisplayParameters{
	vec3 scale;
	float hue_rotation;
	float animation_speed;
	float animation_offset;
	float lifetime;
	vec4 color;
};

struct DynamicsParameters{
	float angle;
	float angular_velocity;
	float initial_velocity_multiplier;
	float directional_velocity;
	float radial_velocity;
	float orbit_velocity;
};
struct PhysicalParameters{
	float linear_accel;
	float radial_accel;
	float tangent_accel;
	float damping;
};

void calculate_initial_physical_params(inout PhysicalParameters params, inout uint alt_seed){
	params.linear_accel = mix(linear_accel_min, linear_accel_max, rand_from_seed(alt_seed));
	params.radial_accel = mix(radial_accel_min, radial_accel_max, rand_from_seed(alt_seed));
	params.tangent_accel = mix(tangent_accel_min, tangent_accel_max, rand_from_seed(alt_seed));
	params.damping = mix(damping_min, damping_max, rand_from_seed(alt_seed));
}

void calculate_initial_dynamics_params(inout DynamicsParameters params,inout uint alt_seed){
	// -------------------- DO NOT REORDER OPERATIONS, IT BREAKS VISUAL COMPATIBILITY
	// -------------------- ADD NEW OPERATIONS AT THE BOTTOM
	params.angle = mix(initial_angle_min, initial_angle_max, rand_from_seed(alt_seed));
	params.angular_velocity = mix(angular_velocity_min, angular_velocity_max, rand_from_seed(alt_seed));
	params.initial_velocity_multiplier = mix(initial_linear_velocity_min, initial_linear_velocity_max,rand_from_seed(alt_seed));
	params.directional_velocity = mix(directional_velocity_min, directional_velocity_max,rand_from_seed(alt_seed));
	params.radial_velocity = mix(radial_velocity_min, radial_velocity_max,rand_from_seed(alt_seed));
	params.orbit_velocity = mix(orbit_velocity_min, orbit_velocity_max,rand_from_seed(alt_seed));
}
void calculate_initial_display_params(inout DisplayParameters params,inout uint alt_seed){
	// -------------------- DO NOT REORDER OPERATIONS, IT BREAKS VISUAL COMPATIBILITY
	// -------------------- ADD NEW OPERATIONS AT THE BOTTOM
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
   params.scale = vec3(mix(scale_min, scale_max, rand_from_seed(alt_seed)));
   params.scale = sign(params.scale) * max(abs(params.scale), 0.001);
	params.hue_rotation =  pi * 2.0 * mix(hue_variation_min, hue_variation_max, rand_from_seed(alt_seed));
	params.animation_speed = mix(anim_speed_min, anim_speed_max, rand_from_seed(alt_seed));
	params.animation_offset = mix(anim_offset_min, anim_offset_max, rand_from_seed(alt_seed));
	params.lifetime = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
	params.color = color_value;
}
void process_display_param(inout DisplayParameters parameters, float lifetime){
	// compile-time add textures
   parameters.color *= texture(color_ramp, vec2(lifetime));
	parameters.color = rotate_hue(parameters.color, parameters.hue_rotation);
}
vec3 calculate_initial_position(inout uint alt_seed) {
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	vec3 pos = vec3(0.);
	 pos = vec3(0.);
	return pos * emission_shape_scale + emission_shape_offset;
}

vec3 process_orbit_displacement(DynamicsParameters param, float lifetime, inout uint alt_seed, mat4 transform, mat4 emission_transform,float delta, float total_lifetime){
if(abs(param.orbit_velocity) < 0.01 || delta < 0.001){ return vec3(0.0);}

	vec3 displacement = vec3(0.);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	float orbit_amount = param.orbit_velocity;
	if (orbit_amount != 0.0) {
       vec3 pos = transform[3].xyz;
       vec3 org = emission_transform[3].xyz;
       vec3 diff = pos - org;
	     float ang = orbit_amount * pi * 2.0 * delta;
	     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
	     displacement.xy -= diff.xy;
        displacement.xy += rot * diff.xy;
	}
       return (emission_transform * vec4(displacement/delta, 0.0)).xyz;
}


vec3 get_random_direction_from_spread(inout uint alt_seed, float spread_angle){
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	vec3 velocity = vec3(0.);
	float spread_rad = spread_angle * degree_to_rad;
	float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
	float angle2_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad * (1.0 - flatness);
	vec3 direction_xz = vec3(sin(angle1_rad), 0.0, cos(angle1_rad));
	vec3 direction_yz = vec3(0.0, sin(angle2_rad), cos(angle2_rad));
	direction_yz.z = direction_yz.z / max(0.0001,sqrt(abs(direction_yz.z))); // better uniform distribution
	vec3 spread_direction = vec3(direction_xz.x * direction_yz.z, direction_yz.y, direction_xz.z * direction_yz.z);
	vec3 direction_nrm = length(direction) > 0.0 ? normalize(direction) : vec3(0.0, 0.0, 1.0);
	// rotate spread to direction
	vec3 binormal = cross(vec3(0.0, 1.0, 0.0), direction_nrm);
	if (length(binormal) < 0.0001) {
		// direction is parallel to Y. Choose Z as the binormal.
		binormal = vec3(0.0, 0.0, 1.0);
	}
	binormal = normalize(binormal);
	vec3 normal = cross(binormal, direction_nrm);
	spread_direction = binormal * spread_direction.x + normal * spread_direction.y + direction_nrm * spread_direction.z;
	return spread_direction;
}
vec3 process_radial_displacement(DynamicsParameters param, float lifetime, inout uint alt_seed, mat4 transform, mat4 emission_transform, float delta){
	vec3 radial_displacement = vec3(0.0);
	if (delta < 0.001){
		return radial_displacement;
	}
	float radial_displacement_multiplier = 1.0;
	vec3 global_pivot = (emission_transform * vec4(velocity_pivot, 1.0)).xyz;
	if(length(transform[3].xyz - global_pivot) > 0.01){
		radial_displacement = normalize(transform[3].xyz - global_pivot) * radial_displacement_multiplier * param.radial_velocity;
	}else{radial_displacement = get_random_direction_from_spread(alt_seed, 360.0)* param.radial_velocity;} 
	if (radial_displacement_multiplier * param.radial_velocity < 0.0){
 // Prevent inwards velocity to flicker once the point is reached.		if (length(radial_displacement) > 0.01){
		radial_displacement = normalize(radial_displacement) * min(abs((radial_displacement_multiplier * param.radial_velocity)), length(transform[3].xyz - global_pivot) / delta);
		}
	
	return radial_displacement;
}

void process_physical_parameters(inout PhysicalParameters params, float lifetime_percent){
	
}

void start() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DisplayParameters params;
	calculate_initial_display_params(params, alt_seed);
	// reset alt seed?
	// alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DynamicsParameters dynamic_params;
	calculate_initial_dynamics_params(dynamic_params, alt_seed);
	PhysicalParameters physics_params;
	calculate_initial_physical_params(physics_params, alt_seed);
   process_display_param(params, 0.0);
	if (rand_from_seed(alt_seed) > AMOUNT_RATIO) {
		ACTIVE = false;
	}
	
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	
	if (RESTART_CUSTOM){
		CUSTOM = vec4(0.);
		CUSTOM.w = params.lifetime;
		CUSTOM.x = dynamic_params.angle;
	}
	if (RESTART_COLOR){
		COLOR = params.color;
	}
	if (RESTART_ROT_SCALE) {
		TRANSFORM[0].xyz = vec3(1.0, 0.0, 0.0);
		TRANSFORM[1].xyz = vec3(0.0, 1.0, 0.0);
		TRANSFORM[2].xyz = vec3(0.0, 0.0, 1.0);
	}

	if (RESTART_POSITION) {
		TRANSFORM[3].xyz = calculate_initial_position(alt_seed);
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}
	if (RESTART_VELOCITY) {
		VELOCITY = get_random_direction_from_spread(alt_seed, spread) * dynamic_params.initial_velocity_multiplier;
		}
	process_display_param(params, 0.);
//	process_dynamic_parameters(dynamic_params, 0., alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA);
	VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
	VELOCITY += EMITTER_VELOCITY * inherit_emitter_velocity_ratio;
		VELOCITY.z = 0.;
		TRANSFORM[3].z = 0.;
}

void process() {
	uint base_number = NUMBER;
//	if (repeatable){
//		base_number = INDEX;
//	}
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	DisplayParameters params;
	calculate_initial_display_params(params, alt_seed);
	DynamicsParameters dynamic_params;
	calculate_initial_dynamics_params(dynamic_params, alt_seed);
	PhysicalParameters physics_params;
	calculate_initial_physical_params(physics_params, alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	CUSTOM.y += DELTA / LIFETIME;
	CUSTOM.y = mix(CUSTOM.y, 1.0, INTERPOLATE_TO_END);
	float lifetime_percent = CUSTOM.y/ params.lifetime;
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
	
	
	
	// will use this later to calculate final displacement and orient the particle.
	vec3 starting_position = TRANSFORM[3].xyz;
	vec3 controlled_displacement = vec3(0.0);
	
//	VELOCITY += process_physics_parameters(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA);
	
	controlled_displacement += process_orbit_displacement(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA, params.lifetime * LIFETIME);
	// calculate all velocity
	
	controlled_displacement += process_radial_displacement(dynamic_params, lifetime_percent, alt_seed, TRANSFORM, EMISSION_TRANSFORM, DELTA);
	
	
	process_physical_parameters(physics_params, lifetime_percent);
	vec3 force;
	{
		// copied from previous version
		vec3 pos = TRANSFORM[3].xyz;
		force = gravity;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * physics_params.linear_accel : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * physics_params.radial_accel : vec3(0.0);
		// apply tangential acceleration;
		float tangent_accel_val = physics_params.tangent_accel;
       force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * tangent_accel_val : vec3(0.0);
		force += ATTRACTOR_FORCE;

		// apply attractor forces
			force.z = 0.;
		VELOCITY += force * DELTA;
	}
	{
		// copied from previous version
		if (physics_params.damping > 0.0) {
			float v = length(VELOCITY);
			v -= physics_params.damping * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		
	}
	
	
	// turbulence before limiting
	vec3 final_velocity = controlled_displacement + VELOCITY;
	
	// limit velocity
	
		final_velocity.z = 0.;
	TRANSFORM[3].xyz += final_velocity * DELTA;
	
	
	process_display_param(params, lifetime_percent);
	
	float base_angle = dynamic_params.angle;
	base_angle += CUSTOM.y * LIFETIME * dynamic_params.angular_velocity;
	CUSTOM.x = base_angle * degree_to_rad;
   COLOR = params.color;
	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	TRANSFORM[3].z = 0.0;
//	params.scale *= length(final_velocity)/100.0;

	TRANSFORM[0].xyz *= sign(params.scale.x) * max(abs(params.scale.x), 0.001);
	TRANSFORM[1].xyz *= sign(params.scale.y) * max(abs(params.scale.y), 0.001);
	TRANSFORM[2].xyz *= sign(params.scale.z) * max(abs(params.scale.z), 0.001);
	
	// 
	CUSTOM.z = params.animation_offset + lifetime_percent * params.animation_speed;
	
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
}

"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_mljpg"]
shader = SubResource("Shader_kcnjn")
shader_parameter/direction = Vector3(1, 0, 0)
shader_parameter/spread = 45.0
shader_parameter/flatness = 0.0
shader_parameter/inherit_emitter_velocity_ratio = 0.0
shader_parameter/initial_linear_velocity_min = 0.0
shader_parameter/initial_linear_velocity_max = 0.0
shader_parameter/directional_velocity_min = 1.0
shader_parameter/directional_velocity_max = 1.0
shader_parameter/angular_velocity_min = 0.0
shader_parameter/angular_velocity_max = 0.0
shader_parameter/orbit_velocity_min = 0.0
shader_parameter/orbit_velocity_max = 0.0
shader_parameter/radial_velocity_min = null
shader_parameter/radial_velocity_max = null
shader_parameter/linear_accel_min = 0.0
shader_parameter/linear_accel_max = 0.0
shader_parameter/radial_accel_min = 0.0
shader_parameter/radial_accel_max = 0.0
shader_parameter/tangent_accel_min = 0.0
shader_parameter/tangent_accel_max = 0.0
shader_parameter/damping_min = 0.0
shader_parameter/damping_max = 0.0
shader_parameter/initial_angle_min = 0.0
shader_parameter/initial_angle_max = 0.0
shader_parameter/scale_min = 1.0
shader_parameter/scale_max = 1.0
shader_parameter/hue_variation_min = 0.0
shader_parameter/hue_variation_max = 0.0
shader_parameter/anim_speed_min = 0.0
shader_parameter/anim_speed_max = 0.0
shader_parameter/anim_offset_min = 0.0
shader_parameter/anim_offset_max = 0.0
shader_parameter/lifetime_randomness = 0.0
shader_parameter/emission_shape_offset = Vector3(0, 0, 0)
shader_parameter/emission_shape_scale = Vector3(1, 1, 1)
shader_parameter/velocity_pivot = Vector3(0, 0, 0)
shader_parameter/color_value = Color(0.701961, 0.0156863, 0.0156863, 1)
shader_parameter/gravity = Vector3(0, -1e-06, 0)

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_rpwqe"]
radius = 9.5
height = 45.0

[sub_resource type="AtlasTexture" id="AtlasTexture_fdepi"]
atlas = ExtResource("3_b3m7o")
region = Rect2(0, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_gxwfy"]
atlas = ExtResource("3_b3m7o")
region = Rect2(200, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_i8qvq"]
atlas = ExtResource("3_b3m7o")
region = Rect2(400, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_8bhud"]
atlas = ExtResource("3_b3m7o")
region = Rect2(600, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_wbwx4"]
atlas = ExtResource("3_b3m7o")
region = Rect2(800, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_w3drl"]
atlas = ExtResource("3_b3m7o")
region = Rect2(1000, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_n81ss"]
atlas = ExtResource("4_jo2p5")
region = Rect2(0, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_bi6sw"]
atlas = ExtResource("4_jo2p5")
region = Rect2(200, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_wrnj1"]
atlas = ExtResource("4_jo2p5")
region = Rect2(400, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_0bjpo"]
atlas = ExtResource("4_jo2p5")
region = Rect2(600, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_s0gwp"]
atlas = ExtResource("4_jo2p5")
region = Rect2(800, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_otwrb"]
atlas = ExtResource("4_jo2p5")
region = Rect2(1000, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_wccys"]
atlas = ExtResource("4_jo2p5")
region = Rect2(1200, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_ioja7"]
atlas = ExtResource("4_jo2p5")
region = Rect2(1400, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_lj0d3"]
atlas = ExtResource("5_gwcrf")
region = Rect2(0, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_esnsk"]
atlas = ExtResource("5_gwcrf")
region = Rect2(200, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_wejtw"]
atlas = ExtResource("6_1d8tg")
region = Rect2(0, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_2if6g"]
atlas = ExtResource("6_1d8tg")
region = Rect2(200, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_ul4nc"]
atlas = ExtResource("6_1d8tg")
region = Rect2(400, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_ci1kg"]
atlas = ExtResource("6_1d8tg")
region = Rect2(600, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_nawwl"]
atlas = ExtResource("6_1d8tg")
region = Rect2(800, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_mgmq4"]
atlas = ExtResource("6_1d8tg")
region = Rect2(1000, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_3x448"]
atlas = ExtResource("6_1d8tg")
region = Rect2(1200, 0, 200, 200)

[sub_resource type="AtlasTexture" id="AtlasTexture_ynsxv"]
atlas = ExtResource("6_1d8tg")
region = Rect2(1400, 0, 200, 200)

[sub_resource type="SpriteFrames" id="SpriteFrames_r6gqq"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_fdepi")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_gxwfy")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_i8qvq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8bhud")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wbwx4")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_w3drl")
}],
"loop": true,
"name": &"Death",
"speed": 2.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_n81ss")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_bi6sw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wrnj1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0bjpo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_s0gwp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_otwrb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wccys")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ioja7")
}],
"loop": true,
"name": &"Idle",
"speed": 2.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_lj0d3")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_esnsk")
}],
"loop": true,
"name": &"Jump",
"speed": 2.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_wejtw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_2if6g")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ul4nc")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ci1kg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_nawwl")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mgmq4")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3x448")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ynsxv")
}],
"loop": true,
"name": &"Run",
"speed": 2.0
}]

[sub_resource type="Animation" id="Animation_3i5gm"]
resource_name = "Attack_1"
length = 0.2
step = 0.08
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("13_cxbse")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [6]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:vframes")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [1]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Sprite2D:frame")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.08, 0.16),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [3, 4, 5]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("AttackManager/Area2D:monitoring")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0.08, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="Animation" id="Animation_u15dx"]
resource_name = "Attack_2"
length = 0.25
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("14_56vgv")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [6]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:vframes")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [1]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Sprite2D:frame")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.08, 0.2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [3, 4, 5]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("AttackManager/Area2D:monitoring")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0.1, 0.25),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="Animation" id="Animation_84xm8"]
resource_name = "Death"
length = 2.0
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("15_6vbcu")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [6]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:vframes")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [1]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Sprite2D:frame")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5]
}

[sub_resource type="Animation" id="Animation_s0bl4"]
resource_name = "Fall"
length = 0.4
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("7_nu55d")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [2]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:vframes")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [1]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Sprite2D:frame")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [0, 1]
}

[sub_resource type="Animation" id="Animation_a671s"]
resource_name = "Idle"
length = 1.6
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:vframes")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [1]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [8]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:texture")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [ExtResource("4_jo2p5")]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Sprite2D:frame")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5, 6, 7]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("AttackManager/Area2D:monitoring")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [false]
}

[sub_resource type="Animation" id="Animation_wp5gs"]
resource_name = "Jump"
length = 0.4
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("5_gwcrf")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [2]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:vframes")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [1]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Sprite2D:frame")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [0, 1]
}

[sub_resource type="Animation" id="Animation_6a61v"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:vframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [1]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:hframes")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [8]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Sprite2D:texture")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [ExtResource("4_jo2p5")]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("AttackManager/Area2D:monitoring")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}

[sub_resource type="Animation" id="Animation_kjfyu"]
resource_name = "Run"
length = 0.8
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("6_1d8tg")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [8]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:vframes")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [1]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Sprite2D:frame")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5, 6, 7]
}

[sub_resource type="Animation" id="Animation_7gikw"]
resource_name = "Take_Damage"
length = 0.4
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("8_vhexq")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprite2D:hframes")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [4]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Sprite2D:vframes")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [1]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("Sprite2D:frame")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_ba24s"]
_data = {
"Attack_1": SubResource("Animation_3i5gm"),
"Attack_2": SubResource("Animation_u15dx"),
"Death": SubResource("Animation_84xm8"),
"Fall": SubResource("Animation_s0bl4"),
"Idle": SubResource("Animation_a671s"),
"Jump": SubResource("Animation_wp5gs"),
"RESET": SubResource("Animation_6a61v"),
"Run": SubResource("Animation_kjfyu"),
"Take_Damage": SubResource("Animation_7gikw")
}

[sub_resource type="Animation" id="Animation_1fmvc"]
resource_name = "CameraMovementExit"
length = 0.4
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../Camera2D:offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.4),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(20, 0), Vector2(0, 0)]
}

[sub_resource type="Animation" id="Animation_qwge2"]
resource_name = "CameraMovementIn"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../Camera2D:offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(100, 0), Vector2(20, 0)]
}

[sub_resource type="Animation" id="Animation_mpnsm"]
resource_name = "CameraMovementOut"
length = 3.0
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("../Camera2D:offset")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 3),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(0, 0), Vector2(100, 0)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_2adyi"]
_data = {
"CameraMovementExit": SubResource("Animation_1fmvc"),
"CameraMovementIn": SubResource("Animation_qwge2"),
"CameraMovementOut": SubResource("Animation_mpnsm")
}

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_nfbqd"]
radius = 32.0
height = 92.0

[node name="Player" type="CharacterBody2D"]
collision_layer = 37
collision_mask = 138
script = ExtResource("1_ooqp6")

[node name="Sprite2D" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_wi5bl")
texture = ExtResource("4_jo2p5")
hframes = 8

[node name="Dash" parent="." instance=ExtResource("2_s882g")]

[node name="DashEffect" type="GPUParticles2D" parent="."]
z_index = -1
emitting = false
process_material = SubResource("ShaderMaterial_mljpg")
texture = ExtResource("5_en8x0")
lifetime = 0.2
script = ExtResource("5_jlfvf")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CapsuleShape2D_rpwqe")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
visible = false
texture_filter = 1
sprite_frames = SubResource("SpriteFrames_r6gqq")
animation = &"Run"
metadata/_edit_lock_ = true

[node name="Camera2D" type="Camera2D" parent="."]
offset = Vector2(20, 0)
zoom = Vector2(1.6, 1.6)
limit_left = -24
limit_top = -280
limit_bottom = 300
limit_smoothed = true
script = ExtResource("10_ruuap")
decay = 1.0
max_offset = Vector2(10, 7)

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_ba24s")
}
autoplay = "Idle"

[node name="AnimationPlayer2" type="AnimationPlayer" parent="."]
root_node = NodePath("../AnimationPlayer")
libraries = {
"": SubResource("AnimationLibrary_2adyi")
}

[node name="HealthManager" type="Node" parent="."]
script = ExtResource("12_2wcsw")

[node name="HealthTicks" type="Timer" parent="HealthManager"]

[node name="CourageManager" type="Node" parent="."]
script = ExtResource("13_4olqt")

[node name="CourageTicks" type="Timer" parent="CourageManager"]

[node name="InvincibilityPeriodManager" type="Node" parent="."]

[node name="InvincibityTimer" type="Timer" parent="InvincibilityPeriodManager"]
wait_time = 2.0
one_shot = true

[node name="ScreenShakeTimer" type="Timer" parent="InvincibilityPeriodManager"]
wait_time = 0.1
one_shot = true

[node name="AttackManager" type="Node2D" parent="."]
script = ExtResource("17_gd8pb")

[node name="Area2D" type="Area2D" parent="AttackManager"]
position = Vector2(0, -10)
rotation = 1.5708
collision_layer = 4
collision_mask = 8

[node name="CollisionShape2D" type="CollisionShape2D" parent="AttackManager/Area2D"]
position = Vector2(-0.000137329, -38)
shape = SubResource("CapsuleShape2D_nfbqd")

[node name="InnerAttackTimer" type="Timer" parent="AttackManager"]
wait_time = 0.25
one_shot = true

[node name="OuterAttackTimer" type="Timer" parent="AttackManager"]
wait_time = 0.5
one_shot = true

[node name="LongerOuterAttackTimer" type="Timer" parent="AttackManager"]
wait_time = 0.8
one_shot = true

[node name="ReadyUpTimer" type="Timer" parent="AttackManager"]
wait_time = 0.32
one_shot = true

[node name="RunSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("14_lnfkc")
bus = &"SFX"

[node name="HeavyBreathingSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource("20_mjcii")
bus = &"SFX"

[node name="HeartbeatSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource("21_77wdt")
bus = &"SFX"

[node name="CoyoteTimer" type="Timer" parent="."]
wait_time = 0.3
one_shot = true

[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_animation_player_animation_finished"]
[connection signal="animation_finished" from="AnimationPlayer" to="AttackManager" method="_on_animation_player_animation_finished"]
[connection signal="timeout" from="InvincibilityPeriodManager/InvincibityTimer" to="." method="_on_invincibity_timer_timeout"]
[connection signal="body_entered" from="AttackManager/Area2D" to="AttackManager" method="_on_area_2d_body_entered"]
[connection signal="timeout" from="AttackManager/InnerAttackTimer" to="AttackManager" method="_on_inner_attack_timer_timeout"]
[connection signal="timeout" from="AttackManager/OuterAttackTimer" to="AttackManager" method="_on_outer_attack_timer_timeout"]
[connection signal="timeout" from="AttackManager/ReadyUpTimer" to="AttackManager" method="_on_ready_up_timer_timeout"]
[connection signal="timeout" from="CoyoteTimer" to="." method="_on_coyote_timer_timeout"]
